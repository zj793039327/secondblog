[{"id":0,"href":"/posts/21_master_sicp_day_02/","title":"Day 2 实践，求牛顿平方根","section":"Posts","content":" 1 Day 1 的复习 2 数学概念和计算机概念的区分 3 可操作的平方根计算 3.1 牛顿法求平方根的数学理解 3.2 使用scheme实现牛顿法 4 块封装 和 局部变量控制 5 过程和计算 5.1 迭代 VS 递归 通过已经学习到的东西，矫正概念，进行更有意思的计算\n1 Day 1 的复习 # 通过了第一天的学习，基本上明白了以下的内容\n程序的结构，基础元素等 lisp语言的基础 基本元素计算，前缀表达式， prefix-notation special forms 特殊元素， define, cond 由于1、2组合而成的复合表达式 针对符合表达式，通过 代换模型 subsitution model 进行人工智能的计算（笑） 做了一些练习题 在lisp中，操作符也可以用来 cond 人工智能代换的时候，有2种顺序，应用序和正则序，两者在极端场景下，效果不一样 2 数学概念和计算机概念的区分 # 数学比较重要的是概念定义，严谨的定义；计算机概念中，更重视的是操作。 书中举例说了，比如要计算平方根 数学概念很简单\nx 的平方根 = the y such that y ≥ 0 and y 的平方 = x. 但是这只是个概念，无法用来计算，写一样的lisp代码也没办法计算。\n3 可操作的平方根计算 # 比较通常的办法，就是使用牛顿的逐步逼近法（successive approximations）\n我看到这里开始一脸懵逼了\n平方根的逼近求值法 1 迭代法求平方根 2 quara的一个比较好的回答 3 参考了一个文档，逐渐明白一些了，\n3.1 牛顿法求平方根的数学理解 # 牛顿法的具体推导过程\ny = x^2 这个函数，坐标系中，是经典的反抛物线图案，\n求 根号2 的时候，相当于y=2，求x的值。\n结合图像分析，相当于是求 纵坐标 y=2的时候，曲线对应x的横坐标。\n牛顿法的话，结合右图进行分析\n将 y = x^2 进行简化，变成 y= x^2 - 2，就变成了上图的样子 这样一来，曲线和x轴的交点就变成了要求的根号2，整个函数变成了 f(x) = x^2 -2 随便找一个 x_0 点，针对 x_0 进行求导，f\u0026rsquo;(x) = 2x，如图，导数是一条直线 直线与x轴的交点，作为 x_1，可以明显看到，x_1 会更接近实际的x，但是不等于x 继续3的步骤，直到 x_n，会逐步收敛到x，进而求出非常接近的x 以上，就是结合图形的直观理解，可以看到，这个方法非常的直观\n接下来，会结合上面的直观理念，进行公式级别的推导计算\n看下上面的图，已知条件如下\n直线的斜率为 f\u0026rsquo;(x_0) 直线经过了一个点：(x_0, f(x_0))，这就是在曲线找到的一个随机点 直线经过了另一个点：(x_1, 0)，这就是x轴的交点 可以得到2个公式\n\\[ 基础公式：y = f\u0026rsquo;(x_0)x_1 + b , 其中, 斜率为 f\u0026rsquo;(x_0) \\]\n套用2个点位，可以得到下面2个公式,\n\\[ 1. 套用(x_0, f(x_0)) : f(x_0) = f\u0026rsquo;(x_0)x_0+b \\] \\[ 2. 套用(x_1, 0) : 0 = f\u0026rsquo;(x_0)x_1+b \\]\n两个公式进行相减，可以将b消除，并且得到可以便于计算的公式\n\\[ f(x_0) = f\u0026rsquo;(x_0)x_0 - f\u0026rsquo;(x_0)x_1 \\]\n公式进行变换，则可以得到对于 \\(x_1\\) 的求值公式\n\\begin{eqnarray}\nf\u0026rsquo;(x_0)x_1 = f\u0026rsquo;(x_0)x_0 - f(x_0) \\\\\nx_1 = \\frac{f\u0026rsquo;(x_0)x_0 - f(x_0)}{f\u0026rsquo;(x_0)} \\\\\nx_1 = x_0 - \\frac{f(x_0)}{f\u0026rsquo;(x_0)}\n\\end{eqnarray}\n至此，求值公式已经ok，对于一元二次方程，展开的方式4已经非常明显了。\n将公式套用到 \\(f(x) = x^2-2\\) 的话，从 \\(x_0\\) 计算 \\(x_1\\) 的方式就很简单了\n\\begin{equation} x_1=x_0 - \\frac{x_0^2-2}{2x_0} \\end{equation}\n经过简化，公式如下\n\\begin{equation} x_1=\\frac{x_0+\\frac{2}{x_0}}{2} \\end{equation}\n3.2 使用scheme实现牛顿法 # 实现代码很简单\n(define (sqrt x) (sqrt-iter 1.0 x)) 主入口函数，就是sqrt这个，其中调用了 sqrt-iter 这个函数，这个函数有2个入参 1.0 就是初始的 \\(x_0\\) x 则是要求的目标值\n(define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) sqrt-iter 函数的定义如上 这个函数内部其实就只有一个判定 如果收敛到目标值，就返回，否则，优化并且迭代\n(define (improve guess x) (average guess (/ x guess))) (define (average x y) (/ (+ x y) 2)) (define (good-enough? guess x) (\u0026lt; (abs (- (square guess) x)) 0.001)) 其中的3个子函数如上。都比较简单\ngood-enough? 用来判定是否达到了收敛阈值，可以看到，判定是相对反向的： 通过 square 方法，来判定计算的value进行平方以后和目标值的差距。\naverage 中规中矩的函数，求平均数\nimprove 这是核心函数，用来计算新的 \\(x_n\\), guess 就是 \\(x_n-1\\)，x就是\\(y\\)\n这个函数整体就是在执行公式5，即 \\(x_1=\\frac{x_0+\\frac{2}{x_0}}{2}\\)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (define (square x) (* x x)) (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) (define (improve guess x) (average guess (/ x guess))) (define (average x y) (/ (+ x y) 2)) (define (good-enough? guess x) (\u0026lt; (abs (- (square guess) x)) 0.001)) (define (sqrt x) (sqrt-iter 1.0 x) ) 版本1 的代码如上。\n可以看到，这其中是有一段递归的，比如 sqrt-iter 调用了自己，可以将上面的函数调用关系， 变成一棵树展示出来\n函数被拆解成了不同的小结构，每个结构各司其职，都封装了逻辑， 每个小结构逻辑都很简单。\n每个大结构，不会也不需要关注小结构的内部实现。这就是抽象层次的问题。 大的结构，抽象层次高，小结构抽象层次低，\n抽象层次也只是层次，不代表复杂度，抽象层次高的函数，不一定就会比低层次的更复杂。\n4 块封装 和 局部变量控制 # 可以看到，在这个过程中，很多函数名称出现了\n(define (sqrt x) (define (good-enough? guess x) (\u0026lt; (abs (- (square guess) x)) 0.001)) (define (improve guess x) (average guess (/ x guess))) (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) (sqrt-iter 1.0 x) ) 如上，这是第二版改动，可以看到，把一些工具函数，可以直接定义在大函数内部，这样，就算是一个更高级别的封装了\n不会污染全局变量，内部定义的函数，可见性只限制在内部\n进一步的说明，变量 x 也是一个局部变量，可以共享使用\n(define (sqrt x) (define (good-enough? guess) (\u0026lt; (abs (- (square guess) x)) 0.001)) (define (improve guess) (average guess (/ x guess))) (define (sqrt-iter guess) (if (good-enough? guess) guess (sqrt-iter (improve guess)))) (sqrt-iter 1.0) ) 这种情况，称之为 词法作用域 (lexical scoping)\n在现代的编程中，这种块结构稀松平常，比如\n面向对象编程 重构改善 设计模式 领域对象模型等 这些讨论的，其实都是如何用好这种 块结构 ，却很少有人讨论这种结构一开始是怎么设计出来的，来源于 老的 Algol 60 语言。\n5 过程和计算 # 编写程序也是有各种套路的，就像是摄影和下棋一样，学会了套路和流程，才算是上道儿了。 接下来，就要介绍各种组合拳了。\n研究各种函数流程的执行结构 研究不同执行流程的时间复杂度，空间复杂度 这些代表性的函数，只是用来演示的，不能作为生产环境使用 5.1 迭代 VS 递归 # 不知道大家是怎么看待 这两个概念的，其实我本身在阅读之前，是没有明确的区别的。 ` 由于之前学了yin神的计算机课，大概知道了迭代是递归的一种（尾递归），但是还是看出了解一下比较好\n阶乘的实现举例\n递归实现：\n(define (factorial n) (if (= n 1) 1 (* n (factorial (- n 1))))) 迭代实现：\n(define (factorial n) (fact-iter 1 1 n)) (define (fact-iter product counter max-count) (if (\u0026gt; counter max-count) product (fact-iter (* counter product) (+ counter 1) max-count))) 可以看到，递归在执行的时候，其实是 不计算 的，只有都展开之后才开始计算；而迭代则不一样，每次迭代都会计算。\n递归 ：就递归来说，递归有明显的展开和收缩的过程，这个过程产生一种链条（chain），每次调用都有一种延迟计算（deferred operations）挂靠在链条上。 解释器要执行递归，需要把chain都保存起来，这个例子中，空间的增长是线性的(n 的正比)，这就是一个 线性递归 的过程\n迭代 ：这个过程中，没有展开和收缩的过程，每次执行，就是单独的，这种过程就是一个 迭代计算 过程\n注意，代码中有递归调用，并不代表这个计算过程是递归的，比如 迭代实现中，也有 fact-iter 的递归调用\n这就是 递归计算过程 和 递归函数 的区别。\n一个简单的可以看出来到底是递归还是迭代的办法，就是看下递归的表达式 看下这个表达式，是否会阻碍了其他表达式的计算5\n比如\n(define (++ a b) (if ( = a 0) b (inc (++ (dec a) b))) ;; 最后的求值表达式中，有inc在++外面，导致inc进行了延迟计算，这样就产生了chain ) ;; (++ 4 5) ;; (inc (++ 3 5))) ;; (inc (inc (++ 2 5))) ;; (inc (inc (inc (++ 1 5)))) ;; (inc (inc (inc (inc (++ 0 5))))) ;; (inc (inc (inc (inc (5))))) ;; (inc (inc (inc (6)))) ;; (inc (inc 7)) ;; (inc 8) ;; 9 (define (++ a b) (if ( = a 0) b (++ (dec a) (inc b)))) ;; 最后的求值表达式中，inc 在++里面 ;;(++ 4 5) ;;(++ 3 6) ;;(++ 2 7) ;;(++ 1 8) ;;(++ 0 9) ;;9 平方根的逼近求值法 https://blog.csdn.net/weixin_42290927/article/details/106453060\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n迭代法求平方根 https://www.physixfan.com/diedaifaqiupingfanggen/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nquora的一个比较好的回答 link\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n维基百科-牛顿法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSICP解答（练习1.9）http://community.schemewiki.org/?sicp-ex-1.9\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":1,"href":"/posts/21_master_sicp_day_01/","title":"Day 1 构造过程抽象","section":"Posts","content":" 1 计算过程的定义 2 用Lisp编程 3 程序设计的基本元素 3.1 Expressions 表达式 3.2 Naming and the Environment 命名和环境:lispbase: 3.3 Evaluation Combinations 组合式求值 3.4 Compound Procedures 复合过程 3.5 The Substitution Model for Procedure Application 过程的代换模型 3.5.1 Applicative order versus normal order 应用序 和正则序 3.6 Conditional Expressions and Predicates:lispbase: 第一天的学习，会从基本开始，了解程序的基本概念，了解lisp语言，掌握基本代码的编写\n1 计算过程的定义 # 计算过程是思维的高级抽象，看不见摸不着，但是又有现实的意义，可以完成某些智力的工作。\n我们这些程序员肯定感触很深，比如刚刚火起来的sora1。\nFigure 1: sora\n程序就是这样无声无息的改变世界的。\n一个计算过程需要精密而准确的执行相应的程序。\n好的程序应该像是设计良好的汽车，或者是核反应堆一样，具有某种模块化的设计，其中的各个部分可以独立的构造、替换、排除错误。\n2 用Lisp编程 # lisp是20世纪50年代后期发明的一种语言，主要是为了对 list 进行 processing的语言。 称为【递归方程】，作者是John McCarthy2\n是的，这里的lisp，其实就是 list + processing\nLisp的名字，来自表表处理（LISt PROCESSING），Lisp语言的设计是提供了符号计算的能力，去解决一些程序设计问题 比如代数表达式的符号微分和积分。\nLisp不是刻意设计的结果，是一种实验性的，非正式的发展实现。lisp发展到现在，已经有很多种方言了，参见下面的发展图\nFigure 2: lisp的发展历程(from wikipedia)]\n值得一说的是，ChezScheme3是业界最快的scheme编译器，之前是在思科的收费软件，后来进行了开源\nlisp 主要的特点，在于将『数据』和『程序』进行了几乎无差别的对待，在数据处理方面，效果更好。\n3 程序设计的基本元素 # 任何一门强力的程序设计语言，都需要考虑以下的一些概念\n基本的表达形式 ： 语言最基本的颗粒度 组合的方法 ： 通过组合的方式，可以将简单的东西拼装成复杂的东西 抽象的方法 ： 为复杂或者简单的东西命名，并将这些东西当做单元去操作 简明扼要，这其实就是语言的概念，少一个都不行。因此，在lisp中，其实只有5个元素\n3.1 Expressions 表达式 # 学习语言最好的方式，就是有一个运行环境，在命令行里面敲代码，一边敲代码，一边执行。\n个人理解，这里的命令行是指REPL(Read eval print loop)，比如典型的，命令行就是一种REPL。 当然，大一些的函数，还是不方便在REPL中编写和运行的。但是一些小的，3-5行的还是比较合适。 pycharm就带一个python的REPL环境，如下图\nFigure 3: python Console(REPL)\n这里演示一些基本的lisp例子\n(+ 137 349) ;486 在lisp中，计算逻辑使用了前缀表达式(prefix-notation) 前缀表达式虽然反直觉，但是有很多优点\n随意扩充 (* 1 2 3 4 5) 随意嵌套 (* (+ 1 2) (- 2 1)) 但是也有一些缺点，比如不格式化的化，很难看明白\n3.2 Naming and the Environment 命名和环境 lispbase # 命名 ：将一段代码，通过 define 关键字，创建别名，可以随意引用\n环境 ：环境是程序运行中的内存，会存储已经命名过的名字+名字代表的对象（pair）\n(define size 2) (* 2 size) 3.3 Evaluation Combinations 组合式求值 # 一种分而治之的思想，整体程序的运行，其实就是两步\n分开求所有子表达式（sub-expressions）的值（operands） 将所有表达式的值（the operands）使用操作符（the operator）进行计算 求值的过程，就称之为 conbination\n可以照着这张图进行理解\n(* (+ 2 (* 4 6)) (+ 3 5 7)) Figure 4: 表达式求值示意图（来源原书）\n你会发现，这些符号中， + 这种的属于内置符号（built-in）， 你自己定义的 size 这种的属于命名符号， 但是对于 (define x 2) 这种的表达式，lisp采取的措施就不是求值， 这属于特殊的规则（special form）\n3.4 Compound Procedures 复合过程 # lisp中的元素到现在，总体介绍分为以下的\n数字、算数，作为基础数据和过程 可嵌套的组合，提供了一种组合的手段 定义，将name和values关联在一起，提供了抽象 本章节， 将会介绍更强力的工具：过程定义（procedure definitions），可以针对一个元素进行抽象重命名\n这不就是函数me\n(define (square x) (* x x)) ;基本的定义语句如下： (define (⟨name⟩ ⟨formal parameters⟩) ⟨ body⟩) (define (sum-of-squares x y) (+ (square x) (square y))) (define (f a) (sum-of-squares (+ a 1) (* a 2))) 光看过程，其实无法猜测里面是什么东西\n3.5 The Substitution Model for Procedure Application 过程的代换模型 # 代换模型（substitution model）简言之，就是在过程执行的时候， 系统会将抽象的名字换成原始的过程，并且运行。\n说白了，其实就遍历二叉树，深度遍历二叉树。 递归，将所有表达式入栈， 递归到最末尾，依次求值出栈。\n当然，现实中的编译器、解释器不只是代换这么简单，还会更加复杂。 书籍的 第五章 会给出一个完整的解释器和编译器。\n是否有点期待呢？\n现在看了目录之后，发现总共就只有5章，突然有点慌\n3.5.1 Applicative order versus normal order 应用序 和正则序 # 比如计算下面的表达式\n(f 5) Figure 5: 应用序\n应用序(Applicative order)，是计算的过程中能算就算，当然是基础计算 缺点是不直观，优点是速度较快，scheme中，用的就是应用序的代换模型\nFigure 6: 正则序\n正则序(normal order)，则是代换的过程中绝不计算，都代换完在计算 优点是直观，缺点则是部分需要重复计算，比如这里的 (+ 5 1) “fully expand and then reduce”\n在某些练习中，正则序和应用序表现的效果也不一样的。\n; Exercise 1.5 (define (p) (p)) (define (test x y) (if (= x 0) 0 y)) ; (test 0 (p)) 直接死循环了 ;; 这里用了app order的话，会先对param求值，(p)本身就是死循环 ;; 如果用了正则序，则不会求值，会一直expend，(p)不会被执行，则返回0 ;; https://www.cnblogs.com/ssaylo/p/13633403.html 3.6 Conditional Expressions and Predicates lispbase # 这是介绍第二个 special form 就是控制流：if\n(define (abs x) (cond ((\u0026gt; x 0) x) ((= x 0) 0) ((\u0026lt; x 0) (- x)) ) ) 上面这个例子，就是基本的if语句 通过cond这个关键字，进行 「case analysis」 这个动作， cond 的标准用法如下，可以包含多个条件和执行内容 其中，p 代表 predicate，需要返回true 或者 false，e 代表执行的表达式 从p1 开始执行，如果true，则执行，如果fase，就执行下一个。如果都为false，则返回 undifined\n(cond (⟨p1 ⟩ ⟨e1 ⟩) (⟨p2 ⟩ ⟨e2 ⟩) ... (⟨pn ⟩ ⟨en ⟩)) 控制流的cond，还会有一个默认的选项\n(define (abs x) (cond ((\u0026lt; x 0) (- x)) (else x))) 另外，scheme中还提供了原生的 if 关键字，这里更像一个三目运算符\n(define (abs x) (if (\u0026lt; x 0) (- x) x)) predicate 也支持进行组合\nand (and ⟨e 1⟩ . . . ⟨e n⟩) or (or ⟨e 1⟩ . . . ⟨e n⟩) not (not ⟨e⟩) 比如，你可以自己亲手定义 \u0026gt;=\n(define (\u0026gt;= x y) (or (\u0026gt; x y) (= x y))) ;or (define (\u0026gt;= x y) (not (\u0026lt; x y))) cond 也支持对操作符进行设置，如下：\n(define (a-plus-abs-b a b) ((if (\u0026gt; b 0) + -) a b)) openAI在24年2月推出的文生视频模型 sora https://openai.com/sora\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n\u0026ldquo;Recursive Functions of Symbolic Expressions and Their Computation By Machine\u0026rdquo; （符号表达式的递归函数及其机械计算，McCarthy 1960）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n思科官方的chezScheme 用户手册 https://cisco.github.io/ChezScheme/csug9.5/index.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":2,"href":"/posts/21_master_sicp_day_03/","title":"Day 3 深入递归","section":"Posts","content":" 1 树形递归 2 树形递归的案例：找零钱 2.1 优化1：使用备忘录方式提升效率 2.2 优化2：使用dp 动态规划解决问题 2.2.1 理解动态规划 1 树形递归 # 计算斐波那契数列的图形，可以看做是一个树形递归\n斐波那契数列，很简单可以用scheme实现\n(define (fib n) (cond ((= n 0) 0) ((= n 1) 1) (else (+ (fib (- n 1)) (fib (- n 2)))))) 可以看到，这个表达式明显是递归型的，因为会有结构的展开，有 + 运算符在 fib 的外面，因此后者阻碍了前者的计算，这个也会进行展开\n展开的结构和之前不一样，比较复杂。这个例子是展现树递归的好案例，但是在计算fib的值方面，显然效率很低，因为有很多很多的无效计算。\n可以用线性递归的形式进行改写，Fibonacci数列本身其实就是 a+b ，只要不断的代换\n第一轮：a1=0，b1=1 第二轮：a2=1（a1+b1），b2=1(a1) 第三轮：a3=2（a2+b2），b3=1(a2) 第四轮：a4=3(a3+b3), b4=2(a3) 第五轮：a5=5(a4+b4),b5=3(a4) (define (fib n) (fib-iter 1 0 n)) (define (fib-iter a b count) (if (= count 0) b (fib-iter (+ a b) a (- count 1)))) 树形递归看上去效率非常低，但是非常直观，在一定规模内，解决问题的效率非常高\n2 树形递归的案例：找零钱 # 比如这问题：100元人民币，换成零钱，1块的，5块的，10块的，20块的这几种，一共有几种算法？\n如果按照递归考虑，那么这问题可以简单化\n找出来 a 元的 零钱总数 n = 将现金换成 除了 第一种零钱 之外的 其他所有零钱 的不同方式数目 + 将现金 a - d 换成所有种类的零钱 的不同方式的数目 ，其中 d 是一种零钱的面额 思路是自然解题的倒推方式\n{{\u0026lt; katex display=true class=\u0026ldquo;optional\u0026rdquo; \u0026gt;}} $$\n\\begin{array} 假设 f(amount_n,coin_j) = 针对特定金额，使用 j 种硬币的找零方式 , \\\\ 其中，n代表迭代的轮次，j代表包含j种类的硬币 \\\\ \\end{array}\n$$ {{\u0026lt; /katex \u0026gt;}}\n公式相对还是比较好理解的，代表的是最终的状态，目标是进行递归推导，考虑到数学归纳法，那么这个过程可以拆解成如下的部分，并且进行迭代\n$$\n\\begin{array} \\\\ 第n轮，f(amount_n, coin_j) = f(amount_n, coin_{j-1}) + f(amount_{n-1}, coin_j) \\end{array}\n$$\n如何理解这个递归拆分呢，用实例举例来帮助理解，比如我们要计算 \\[ f(5,3),当 coins=[1,2,5] \\] 解释如下：要找总额`5`块的零钱，用了`3`种面额的硬币，分别是 `[1,2,5]`，代表`1`块，`2`块，`5`块的\n\u0026gt; 其实就是示例1，表达式不严谨，将就看下\n\\(amount_n\\) 代表第n轮中的总金额，在n轮，也就是5元\n\\(coin_j\\) 代表此时用3种硬币进行组合，在n轮，也就是3种硬币\n用实例来表示如下 $$\n\\begin{flalign} \u0026amp;n轮: f(5,3)\\\\ =\u0026amp; f(5,2) + f(5-5=0,3) \\\\ \u0026amp; \\textcolor{grey}{;;f(5-5,3) :\\quad 因为第3种硬币的面额是5元}\\\\ =\u0026amp; f(5,2) + f(0,3) \\\\ \u0026amp;\\textcolor{grey}{;;[3种硬币(1,2,5)组合5块] = [2种硬币(1,2)组合5块] + [3种硬币(1,2,5)组合0元]}\\\\ =\u0026amp; f(5,2) + 1 \\\\ \u0026amp;\\textcolor{grey}{;;f(0,3)：此处需要计算这个值，对于amount的解释分成3种情况}\\\\ \u0026amp; \\textcolor{green} {;;\\quad amount \\left\\{ \\begin{array}{lrc} =0,\\quad 此时代表找到了方式，因为硬币的面额正好和金额整除了 \\\\ \u0026lt;0,\\quad 此时代表没找到方式，零钱的面额比剩余的总额要大了\\\\\n0,\\quad 此时代表需要继续进行处理 \\\\ \\end{array} \\right \\}} \\\\ \u0026amp;\\textcolor{grey}{;;f(0,3) 中，amount=0，因此找到一种方式，返回1，即f(0,n)=1 } \\\\ \u0026amp;\\textcolor{grey}{;;[3种硬币(1,2,5)组合5块] = [2种硬币(1,2)组合5块] + 1} \\\\ \u0026amp;\u0026amp; \\end{flalign}\n$$\n$$\n\\begin{flalign} \u0026amp;n-1 到 1轮：f(5,2)\\\\ \u0026amp;= f(5,1)+f(3,2) \\quad\\quad\\quad\\textcolor{grey}{;; f(3,2) = f(5-2,2)}\\\\\n\u0026amp;= [f(5,0) + f(4,1)] + [f(3,1) + f(1,2)]\\quad\\quad\\quad\\textcolor{grey}{;; f(4,1) = f(5-1,1), f(1,2) = f(3-2,1)}\\\\ \u0026amp; \\textcolor{grey}{;;\\quad对于计算 硬币的数量=0的场景，自然而然，可用的方式=0，因此f (n,0)=0} \\\\ \u0026amp;= [0 + f(4,1)] + [f(3,1) + f(1,2)] \\\\ \u0026amp;= \\{0 + [f(4,0) + f(3,1)]\\} + \\{[f(2,1) + f(2,0)] + [f(0,2) + f(1,1)]\\} \\\\ \u0026amp;= \\{0 + [0 + f(3,1)]\\} + \\{[f(2,1) + 0] + [0 + \\textcolor{red}{f(1,1)}]\\} \\\\ \u0026amp;= f(3,1) + f(2,1) + \\textcolor{red}{f(1,1)} \\\\ \u0026amp;= [f(2,1) + f(0,1)] + [\\textcolor{red}{f(1,1)}+f(1,0)] + [f(0,1)+f(1,0)] \\\\ \u0026amp;= [f(2,1) + 0] + [f(1,1)+ 0] + [1+0] \\\\ \u0026amp;= [\\textcolor{red}{f(1,1)}+f(1,0)] + [f(0,1)+f(1,0)] + 1 \\\\ \u0026amp;= \\textcolor{red}{f(1,1)} + 1 + 1 \\\\ \u0026amp;= [f(0,1)+f(1,0)] + 1 + 1 \\\\ \u0026amp;= 1 + 1 + 1 \\\\ \u0026amp;= 3 \\\\ \u0026amp;\u0026amp; \\end{flalign}\n$$\n计算结果 \\(f(5,3)=4,当 coins=[1,2,5]\\)​，可以看到，这里面有很多的冗余计算，仅仅一个 \\(f(1,1)\\) 就重复计算了很多次\n因此，这种计算虽然可以给出正确的答案，但是效率比较低。\n(define (change amount coins) (-\u0026gt; exact-integer? (listof exact-integer?) exact-integer?) (define (cc amount kind-of-coins) (cond [(= amount 0) 1] [(or (\u0026lt; amount 0) (= kind-of-coins 0)) 0] [else (+ (cc amount (- kind-of-coins 1)) (cc (- amount (list-ref coins (- kind-of-coins 1))) kind-of-coins) ) ] )) (cc amount (length coins)) ) 2.1 优化1：使用备忘录方式提升效率 # (define (change amount coins) (-\u0026gt; exact-integer? (listof exact-integer?) exact-integer?) (define tb (make-hash)) (define (del1 x) (- x 1)) (define (cc amount kind-of-coins) (cond [(= amount 0) 1] [(or (\u0026lt; amount 0) (= kind-of-coins 0)) 0] [else (define k1 (format \u0026#34;~s-~s\u0026#34; amount (del1 kind-of-coins))) (define k2 (format \u0026#34;~s-~s\u0026#34; (- amount (list-ref coins (del1 kind-of-coins))) kind-of-coins)) (+ (cond [(hash-has-key? tb k1) (hash-ref tb k1)] [else (hash-set! tb k1 (cc amount (del1 kind-of-coins))) (hash-ref tb k1) ] ) (cond [(hash-has-key? tb k2) (hash-ref tb k2)] [else (hash-set! tb k2 (cc (- amount (list-ref coins (del1 kind-of-coins))) kind-of-coins)) (hash-ref tb k2) ] ) ) ] )) (cc amount (length coins)) ) 使用了这个算法之后，很多计算过一次的 \\(f(a,b)\\) 可以不用重复计算，效率提高很多。\n2.2 优化2：使用dp 动态规划解决问题 # 动态规划这个概念十分高大上，但是通过学习了解的话，感觉就是纸老虎。\n正常的递归，是从 n 到 n-1 一直到 1 动态规划反其道行之，干脆从 1一直计算到 n，这样理解比较容易\n算法-动态规划 Dynamic Programming\u0026ndash;从菜鸟到老鸟1\n算法随想录2\n下面是一段来自编程随想录的动态规划介绍，我感觉一语中的\n动态规划，英文：Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。 所以动态规划中每一个状态一定是由上一个状态推导出来的，**这一点就区分于贪心**，贪心没有状态推导，而是从局部直接选最优的，\n在关于贪心算法，你该了解这些！中我举了一个背包问题的例子。\n例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。**每件物品只能用一次**，求解将哪些物品装入背包里物品价值总和最大。 动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。\n但如果是贪心呢，每次拿物品选一个最大的或者最小的就完事了，和上一个状态没有关系。 所以贪心解决不了动态规划的问题。 其实大家也不用死扣动规和贪心的理论区别，后面做做题目自然就知道了。 而且很多讲解动态规划的文章都会讲最优子结构啊和重叠子问题啊这些，这些东西都是教科书的上定义，晦涩难懂而且不实用。 大家知道动规是由前一个状态推导出来的，而贪心是局部直接选最优的，对于刷题来说就够用了。\n2.2.1 理解动态规划 # 没办法，我就是这么个死脑筋，想不明白就想要想明白，想不明白就很难受\n并且必须非常直观才能想明白，说白了就是抽象思维差劲 #+end_quote\n最近又阅读了动态规划的一些文章，突然发现，这个思路貌似是符合动态规划的。\n简言之，就是 从下到上，通过空间换时间，其实是一种备忘录算法 。\n这个迭代写法，从底层说，就是上面一句话的最简实现。\nf-iter 中的3个参数，其实就是动态规划中的 d[] 数组 由于 f-iter 函数本身 有4个入参，相当于是 d[0]~d[3] 由于 f-iter 本身逻辑较为简单，因此只需要 d[n-1], d[n-2], d[n-3] 即可，在上面的 d[0]~d[2] 中，循环设置了这3个值，即空间复杂度是 o(3) 为了方便理解，这样解释一下, 参见下面的表格\nf(n) \u0026rsquo;s n f(n) \u0026rsquo;s value f-iter \u0026rsquo;s param d array 2 2 2 1 0 f(2) f(1) f(0) 0 3 2+2*2 4 4 2 1 f(3) f(2) f(1) 1 4 4+2*2+3*1 11 11 4 2 f(4) f(3) f(2) 2 5 11+2*4+3*2 25 25 11 4 f(5) f(4) f(2) 3 6 25+2*11+3*4 59 59 25 11 f(6) f(5) f(4) 4 7 59+2*25+3*11 142 142 59 25 f(7) f(6) f(5) 5 你会发现，f-iter中的所有参数，真真实实的是把f(n) 中需要的val存储起来了，这就是没有数组的存储\nHankingHu的csdn博客 算法-动态规划 Dynamic Programming\u0026ndash;从菜鸟到老鸟\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n专注算法编程的carl 算法随想录\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":3,"href":"/posts/21_master_sicp_day_04/","title":"Day 4 深入递归02","section":"Posts","content":" 1 评估递归对资源的消耗 2 降低递归时候资源消耗的办法 2.1 求幂过程引出的点 2.2 最大公约数过程引出的点 1 评估递归对资源的消耗 # 2 降低递归时候资源消耗的办法 # 2.1 求幂过程引出的点 # 2.2 最大公约数过程引出的点 # asdasd\n"},{"id":4,"href":"/posts/21_master_sicp_day_05/","title":"Day 5 高阶函数","section":"Posts","content":" 1 玩法1：入参是函数的 2 玩法2：函数中定义变量 3 玩法3：出参是函数的玩法 1 玩法1：入参是函数的 # 2 玩法2：函数中定义变量 # 3 玩法3：出参是函数的玩法 # asd\n"},{"id":5,"href":"/posts/my-first-blog/","title":"my-first-blog","section":"Posts","content":"This is my post body\nheadline 1 # title # headline 2 # title3 # headline 3 # title5 # "}]