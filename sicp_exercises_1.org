# -*- org -*- #
#+STARTUP: overview
#+TITLE: sicp练习题1
#+AUTHOR: j56
#+STARTUP: indent

* Chapter 1. Building Abstractions with Procedures [0/0]
** 1.1 The Elements of Programming
*** DONE Exercise 1.1 basics
CLOSED: [2024-03-06 Wed 18:25]
#+begin_src emacs-lisp

  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b a)

  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))

  (+ 2 (if (> b a) b a))

  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))

      (+ a 1))

#+end_src
*** DONE Exercise 1.2 嵌套
CLOSED: [2024-03-06 Wed 18:25]
#+begin_src emacs-lisp
 (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: 0
 
*** DONE Exercise 1.3
CLOSED: [2024-03-06 Wed 18:25]

Deﬁne a procedure
that takes three numbers as arguments and
returns the sum of the squares of the two
larger numbers.

#+begin_src scheme

(define (sum-of-squares x y)
  (+ (* x x) (* y y)))
(define (>= x y) (not (< x y)))
(define (exe-1.3 x y z)
  [cond ((and (>= x y) (>= y z)) (sum-of-squares x y))
	((and (>= x y) (>= z y)) (sum-of-squares x z))
	((and (>= y x) (>= x z)) (sum-of-squares y x))
	((and (>= y x) (>= z x)) (sum-of-squares y z))
	((and (>= z x) (>= y x)) (sum-of-squares z y))
	((and (>= z x) (>= x y)) (sum-of-squares x z))
	]
  )
  
(>= 3 2)
(exe-1.3 1 2 3)
(exe-1.3 1 2 2)
(exe-1.3 2 2 1)


#+end_src
*** DONE Exercise 1.4 操作符也可以cond
CLOSED: [2024-03-06 Wed 18:25]
#+begin_src
(define (a-plus-abs-b a b)
   ((if (> b 0) + -) a b))

(a-plus-abs-b 1 2)
(a-plus-abs-b 1 -2)

#+end_src
*** DONE Exercise 1.5 理解正则序
CLOSED: [2024-03-06 Wed 18:25]
Ben Bitdiddle has invented a test to determine
whether the interpreter he is faced with is using
applicativeorder evaluation or normal-order
evaluation. He deﬁnes the following two procedures:

#+begin_src scheme
(define (p) (p))
(define (test x y)
  (if (= x 0) 0 y))
#+end_src


(test 0 (p)) 直接死循环了
这里用了app order的话，会先对param求值，(p)本身就是死循环
如果用了正则序，则不会求值，会一直expend，(p)不会被执行，则返回0
https://www.cnblogs.com/ssaylo/p/13633403.html
另外，哪里有答案呐：http://community.schemewiki.org/?SICP-Solutions
随便一下就搜到了

*** DONE Exercise 1.6 special form的执行序列问题
CLOSED: [2024-03-06 Wed 18:25]
#+begin_src scheme :hl_lines 13-15
(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))


(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
	(else else-clause)))

;; 这个直接死循环了，区别就是 if 和 new-if
(define (sqrt-iter2 guess x)
  (new-if (good-enough? guess x)
	  guess
	  (sqrt-iter2 (improve guess x) x)))
#+end_src

解释如下：原始的if 是 spcial-form，执行按照应用序处理，
因此只会计算多个参数中的一个，新定义的 new-if是正则序的，
会将所有的param求值，因此会陷入死循环中无法脱出

一个更直观的例子

#+begin_src scheme
 (define (iff <p> <c> <a>) (if <p> <c> <a>))
 (define (tryif a) (if (= a 0) 1 (/ 1 0))) 
 (define (tryiff a) (iff (= a 0) 1 (/ 1 0)))
#+end_src

#+begin_src 
Welcome to DrRacket, version 7.5 [3m].
Language: R5RS; memory limit: 128 MB.
> (tryif 0)
1
> (tryif 1)
. . /: division by zero
> (tryiff 0)
. . /: division by zero
> (tryiff 1)
. . /: division by zero
> 
#+end_src
可以看到，执行到 tryiff 0的时候，也返回了不符合的结果，证明已经执行了param中的内容
*** DONE Exercise 1.7 优化goods-enouth
CLOSED: [2024-03-06 Wed 18:25]

上面的方法，在数字特别小，或者特别大的情况下，执行的不给力，会死循环
比如

#+begin_src
Welcome to Racket v8.4 [cs].
> (sqrt 300000000000000000000000000000000000)
  C-c C-c; user break [,bt for context]
  
#+end_src

这是原来的一系列方法
#+begin_src scheme

(define (square x)
  (* x x))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))


(define (sqrt x)
  (sqrt-iter 1.0 x))

#+end_src

#+begin_src scheme
  
(define (square x)
  (* x x))

(define (sqrt-iter guess x)
  (define guess_n (improve guess x))
  (if (good-enough? guess_n guess)
      guess_n
      (sqrt-iter guess_n x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess_n guess)
  (< (abs (- guess_n guess)) 0.00001))


(define (sqrt x)
  (sqrt-iter 1.0 x))

#+end_src

改写完成之后，可以发现，执行运算成功了

#+begin_src
> (sqrt 300000000000000000000000000000000000)
547722557505166100.0
> 

#+end_src

*** DONE Exercise 1.8 求立方根
CLOSED: [2024-03-06 Wed 18:25]

已经给出了函数概念了，实现就比较简单

$$\frac{x/y^2 + 2y }{3}$$

#+begin_src scheme

  (define (cube x)
    (define (cube-iter guess)
      (if (goods-enouth? guess)
          guess
          (cube-iter (improve guess))))
  
    (define (goods-enouth? guess)
     (< (abs (- (* guess guess guess) x)) 0.001)
     )

    (define (improve guess)
      (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))
   (cube-iter 1.0)
   )

;; cases
  (cube 9)
  (cube 8)
  (cube 10)
  (cube 27)
  (cube 81)
  (cube 1000)
  (cube 0.001)

#+end_src
** 1.2 Procedures and the Processes They Generate
*** TODO Exercise 1.9 直观感受递归和迭代的不同

#+begin_src scheme
    (define (+ a b)
     (if ( = a 0)
         b
         (inc (+ (dec a) b)))
  )

;; (++ 4 5)
;; (inc (++ 3 5)))
;; (inc (inc (++ 2 5)))
;; (inc (inc (inc (++ 1 5))))
;; (inc (inc (inc (inc (++ 0 5)))))
;; (inc (inc (inc (inc (5)))))
;; (inc (inc (inc (6))))
;; (inc (inc 7))
;; (inc 8)
;; 9
  
#+end_src


#+begin_src scheme
    (define (+ a b)
     (if ( = a 0)
     b
     (+ (dec a) (inc b))))

  ;;(++ 4 5)
  ;;(++ 3 6)
  ;;(++ 2 7)
  ;;(++ 1 8)
  ;;(++ 0 9)
  ;;9
#+end_src

The easiest way to spot that the first process is recursive (without writing out the substitution) is to note that the "+" procedure calls itself at the end while nested in another expression; the second calls itself, but as the top expression.

*** DONE Exercise 1.10 Ackermann 函数
CLOSED: [2024-02-24 Sat 17:49]
#+begin_src scheme
(define (A x y)
   (cond ((= y 0) 0)
         ((= x 0) (* 2 y))
         ((= y 1) 2)
         (else (A (- x 1) (A x (- y 1))))))
#+end_src

阿克曼函数，增长非常快，通过模型代换看下内容

#+begin_src scheme
;;(A 1 2)
;;((A 0 (A 1 1))
;;((A 0 2))
;;(* 2 2)
;;4

#+end_src

#+begin_src scheme
;;(A 1 4）
;;(A 0 (A 1 3))
;;(A 0 (A 0 (A 1 2)))
;;(A 0 (A 0 (A 0 (A 1 1)))
;;(A 0 (A 0 (A 0 2))
;;(A 0 (A 0 4))
;;(A 0 8)
;;16
#+end_src

可以看到，在 =(g n) = (A 1 n)= 中，基本上，函数的内容为 $2^n$

同理，计算 =(f n) =(A 0 n)= 其实就等于 $2n$

看下 =(A 2 n)=的话，

#+begin_src scheme
;;(A 2 3)
;;(A 1 (A 2 2))
;;(A 1 (A 1 (A 2 1)))
;;(A 1 (A 1 2))
;;(A 1 (A 0 (A 1 1)))
;;(A 1 (A 0 (A 1 1)))
;;(A 1 (A 0 2))
;;(A 1 4)
#+end_src

首先，=(A 2 n)= 会完全变成 多个(A 1 n)

#+begin_src scheme
(A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 (A 0 (A 0 (A 0 2))))
(A 1 (A 0 (A 0 4)))
(A 1 (A 0 8))
(A 1 16)

#+end_src

答案中的 =(define (h n) (A 2 n))= 相当于是 $2^(2^(2^(2...(n times)))) for n>1$

*** DONE Exercise 1.11 分别用递归和迭代编写一个函数
CLOSED: [2024-02-29 Thu 14:20]

递归写法
#+begin_src scheme
(define (f n)
  (cond [(< n 3) n]
	(else (+ (f (- n 1))
		 (* 2 (f (- n 2)))
		 (* 3 (f (- n 3)))))))
#+end_src

迭代写法
#+begin_src scheme
(define (f2 n)
  (define (f-iter a b c count)
    (cond [(< n 3) n]
	  [(<= count 0) a]
	  [else (f-iter (+ a (* 2 b) (* 3 c)) a b (- count 1))]))
  (f-iter 2 1 0 (- n 2)))
#+end_src

一开始，其实我弄不明白这个函数的迭代写法，不知道为啥会这么写

他们在逻辑上非常相似
1. 迭代:  =f(n-1) + 2f(n-2)+ 3f(n-3)=
2. 递归:  =f-iter(a + 2b + 3c)=

你看，基本上就是把f拿出来了，感觉和提取公因式一样，但是仔细想一下，看起来很爽
但是逻辑上想不通

#+begin_quote
没办法，我就是这么个死脑筋，想不明白就想要想明白，想不明白就很难受

并且必须非常直观才能想明白，说白了就是抽象思维差劲
#+end_quote

最近又阅读了动态规划的一些文章，突然发现，这个思路貌似是符合动态规划的。

简言之，就是 =从下到上，通过空间换时间，其实是一种备忘录算法= 。

这个迭代写法，从底层说，就是上面一句话的最简实现。

1. =f-iter= 中的3个参数，其实就是动态规划中的 =d[]= 数组
2. 由于 ~f-iter~ 函数本身 有4个入参，相当于是 =d[0]~d[3]=
3. 由于 ~f-iter~ 本身逻辑较为简单，因此只需要 d[n-1], d[n-2], d[n-3] 即可，在上面的 =d[0]~d[2]= 中，循环设置了这3个值，即空间复杂度是 o(3)

为了方便理解，这样解释一下, 参见下面的表格

| f(n) 's n | f(n) 's value       | f-iter 's param | d array           |
|-----------+---------------------+-----------------+-------------------|
|         2 | 2                   | 2 1 0           | f(2) f(1) f(0)  0 |
|         3 | 2+2*2           4   | 4 2 1           | f(3) f(2) f(1)  1 |
|         4 | 4+2*2+3*1       11  | 11 4 2          | f(4) f(3) f(2)  2 |
|         5 | 11+2*4+3*2      25  | 25 11 4         | f(5) f(4) f(2)  3 |
|         6 | 25+2*11+3*4     59  | 59 25 11        | f(6) f(5) f(4)  4 |
|         7 | 59+2*25+3*11    142 | 142 59 25       | f(7) f(6) f(5)  5 |

你会发现，f-iter中的所有参数，真真实实的是把f(n) 中需要的val存储起来了，这就是没有数组的存储

*** DONE Exercise 1.12 帕斯卡三角形
CLOSED: [2024-03-02 Sat 21:06]
#+begin_src scheme
 (define (pascal r c) 
   (if (or (= c 1) (= c r)) 
       1 
       (+ (pascal (- r 1) (- c 1)) (pascal (- r 1) c))))
#+end_src
编写杨辉三角，只求某行某列的value比较简单，直接递归即可

*** HOLD Exercise 1.13 证明斐波那契数列是最接近的整数        :WAITING:HOLD:
\begin{equation}
\phi^n/\sqrt{5}, 其中，\phi = (1 + \sqrt{5}/2)
提示： Fib(n) = (\phi^n -\gamma^n)/\sqrt{5}
\end{equation}

